include config/buildconfig ;
include config/libsettings ;

actions quietly MkDir1
{
	$(MKDIR) $(<)
}

actions quietly piecemeal RunUnitTest
{
    $(>)
}

actions quietly TagFile
{
    echo TagFile $(2)
    etags -l c++ -I -a $(2) -o $(1)
}

actions Bison
{
   	bison $(2) -d -o $(1)
}

actions Flex 
{
    flex -L -o $(1:B)$(1:S) $(2)
    $(MV) $(1:B)$(1:S) $(1) ;
}

actions ForceClean
{
    $(RM) $(1)
}

rule ForceClean
{
    Always $(2) ;
    Depends $(1) : $(2) ;
}

rule Bison
{
    Depends $(1) : $(2) ;
}

rule Flex
{
	Depends $(1) : $(2) ;
}

# Strip common initial elements of variables v1 and v2, return the result
rule StripCommon
{
	local _result = $(<) ;
	if $(<[1]) = $(>[1])
	{
	    _result = [ StripCommon $(<[2-]) : $(>[2-]) ] ;
	}
	return $(_result) ;
}

# Strip one specific entry v2 from v1 and return the result
rule StripSpecific
{
	local _result = ;
	local _i = ;
	for _i in $(<)
	{
		if $(_i) != $(>)
		{
			_result += $(_i) ;
		}
	}
	return $(_result) ;
}

# Strip all elements in v2 from v1 and return the result
rule StripAllCommon
{
	local _result = $(<) ;
	local _i = ;

	for _i in $(>)
	{
		_result = [ StripSpecific $(_result) : $(_i) ] ;
	}
	
	return $(_result) ;
}

rule FWords
{
    local string = $(1) ;
    local whitespace = $(2) ;
    whitespace = $(whitespace:J="") ;
    whitespace ?= $(.whitespace) ;
    local w = ;
    while $(string)
    {
        string = [ MATCH "^[$(whitespace)]*([^$(whitespace)]*)(.*)" : $(string) ] ;
        if $(string[1]) && $(string[1]) != ""
        {
            w += $(string[1]) ;
        }
        string = $(string[2]) ;
    }
    return $(w) ;
}

rule ListDir
{
	local _result = ;
	local _dirlist = [ GLOB $(1) : * ] ;
	local _subdir = ;
	for _subdir in $(_dirlist)
	{
		local _d = ;
		switch $(_subdir)
		{
			case *\\.	: _d = ;
			case *\\..	: _d = ;
			case *		: _result += $(_subdir) ;
		}
	}
	return $(_result) ;
}

rule RecursiveDir
{
	local _results = [ GLOB $(1) : $(2) ] ;
	local _subdirs = [ ListDir $(1) ] ;
	local _subdir = ;
	for _subdir in $(_subdirs)
	{
		_results += [ RecursiveDir $(_subdir) : $(2) ] ;
	}
	return $(_results) ;
}

rule RecursiveDirList 
{
	local _dir = [ FDirName $(1) ] ;
	return [ RecursiveDir $(_dir) : $(2) ] ;
}

rule DirList
{
	local _dir = [ FDirName $(1) ] ;
	return [ GLOB $(_dir) : $(2) ] ;
}

if $(QT_PATH)
{
	actions mocFile
	{
		$(TOOL_QT_MOC) -I$(qt_ext_include_search_paths) -D$(qt_ext_defines) -D_MSC_VER=1400 -DWIN32 $(2) -o $(1)
	}

	actions uiHeader
	{
		$(TOOL_QT_UIC) $(2) -o $(1)
	}
	
	actions qrcCppFile
	{
		$(TOOL_QT_RCC) -name $(2:B) $(2) -o $(1) 
	}
	
}
else
{
	actions mocFile
	{
		echo "QT_PATH not set!"
	}
	actions uiHeader
	{
		echo "QT_PATH not set!"
	}
	
	actions qrcCppFile
	{
		echo "QT_PATH not set!"
	}
	
}

rule mocHeader
{
	local _moc_output = $(1:P)$(SLASH)$(MOCPREFIX)$(1:B).cpp ;
	
	mocFile $(_moc_output) : $(1) ;
	Depends $(_moc_output) : $(1) ;
	
	NotFile moc ;
	Depends moc : $(_moc_output) ;

	Clean clean : $(_moc_output) ;
	
	return $(_moc_output) ;
}

rule mocHeaders
{
	local _result = ;
	local _i = ;
	for _i in $(1) 
	{
		_result += [ mocHeader $(_i) ] ;
	}
	return $(_result) ;
}

rule uiFile
{
	local _output = $(1:P)$(SLASH)$(UIPREFIX)$(1:B).h ;
	
	uiHeader $(_output) : $(1) ;
	Depends $(_output) : $(1) ;
	
	NotFile ui ;
	Depends ui : $(_output) ;

	Clean clean : $(_output) ;
	
	return $(_output) ;
}

rule uiFiles
{
	local _result = ;
	local _i = ;
	for _i in $(1) 
	{
		_result += [ uiFile $(_i) ] ;
	}
	return $(_result) ;
}

rule qrcFile
{
	local _output = $(1:P)$(SLASH)$(QRCPREFIX)$(1:B).cpp ;
	
	qrcCppFile $(_output) : $(1) ;
	Depends $(_output) : $(1) ;
	Includes $(1) : $(2) ;
	
	NotFile qrc ;
	Depends qrc : $(_output) ;
	Clean clean : $(_output) ;
	return $(_output) ;
}

rule AddFilesToTag
{
    if $(TAG_FILES)
    {
        TAG_FILES += $(1) ;
    }
    else
    {
        TAG_FILES = $(1) ;
    }
}

rule SetDependantOf
{
	if $($(1)_dependant_of) 
	{
		$(1)_dependant_of += $(2) ;
	}
	else
	{
		$(1)_dependant_of = $(2) ;
	}
}

rule SetExtDependantOf
{
	if $($(1)_ext_dependant_of) 
	{
		$(1)_ext_dependant_of += $(2) ;
	}
	else
	{
		$(1)_ext_dependant_of = $(2) ;
	}
}

rule SetIncludeHeaders
{
	local _headers = [ RecursiveDir $(2) : *.h ] ;
	if $(_headers)
	{
		if $($(1)_include_headers) 
		{
	    	$(1)_include_headers += $(_headers) ;
	    }
	    else
	    {
	    	$(1)_include_headers = $(_headers) ;
	    }
    }
}

rule GetIncludeHeaders
{
	if $($(1)_include_headers)
	{
		return $($(1)_include_headers) ;
	}
	else
	{
		echo $(2) is attempting to use headers for library $(1), but they are not set. ;
	}
}


rule SetSearchPaths 
{
	local _dir = [ FDirName $(2) ] ;

	if $($(1)_include_search_paths)
	{
		$(1)_include_search_paths += $(_dir) ;
	}
	else
	{
		$(1)_include_search_paths = $(_dir) ;
	}
	SetIncludeHeaders $(1) : $(_dir) ;
}

rule GetSearchPaths
{	
	if $($(1)_include_search_paths)
	{
		return [ FIncludes $($(1)_include_search_paths) ] ;	
	}
	else
	{
		echo Attempting to use include path for library $(1), but they are not set. ;
	}
}

rule SetLinkLibraries
{
	if $($(1)_library_files)
	{
		$(1)_library_files += $(2) ;
	}
	else
	{
		$(1)_library_files = $(2) ;
	}
}

rule GetLinkLibraries 
{
	if $($(1)_library_files)
	{
		return $($(1)_library_files) ;	
	}
	else
	{
		echo Attempting to use library files for library $(1), but they are not set. ;
	}
}

rule SetObjectFiles
{
	$(1)_object_files = ;
	local _i = ;
	for _i in $($(1)_source_files)
	{
		local _object		= $(BUILD_OBJ_DIR)$(_i:S=$(SUFOBJ)) ;
		local _path			= $(_object:P) ;
		$(1)_object_files	+= $(_object) ;
		
		# Includes $(_i) : config$(SLASH)Jamrules ;

		Depends $(_object) : $(_path) ;
        Depends $(_object) : $(_i) ;
		Compile $(_object) : $(_i) ;
		MkDir $(_path) ;
	}

	for _i in $($(1)_dependant_of)
	{
		Includes $($(1)_source_files) : [ GetIncludeHeaders $(_i) : $(1) ] ;	
	}	

	if $($(1)_include_headers)
	{
		Includes $($(1)_source_files) : $($(1)_include_headers) ;
	}

	Clean clean : $($(1)_object_files) ;
}

rule CreateObjectFiles
{
	local _objects = ;
	local _i = ;
	for _i in $(1)
	{
		local _object  = $(BUILD_OBJ_DIR)$(_i:S=$(SUFOBJ)) ;
		local _path    = $(_object:P) ;
		_objects      += $(_object) ;
		
		# Includes $(_i) : config$(SLASH)Jamrules ;

		Depends $(_object) : $(_path) ;
        Depends $(_object) : $(_i) ;
		Compile $(_object) : $(_i) ;
		MkDir $(_path) ;
	}

	for _i in $($(2)_dependant_of)
	{
		Includes $(1) : [ GetIncludeHeaders $(_i) ] ;	
	}	

	Clean clean : $(_objects) ;
	return $(_objects) ;
}


rule SetSourceFiles
{
	if $($(1)_source_files)
	{
		$(1)_source_files = $($(1)_source_files) $(2) ;
	}
	else
	{
		$(1)_source_files = $(2) ;
	}
}

rule GetSourceFiles
{
	return $($(1)_source_files) ;
}

rule SetExtraCompileFlags
{
	if $($(1)_extra_compile_flags)
	{
		$(1)_extra_compile_flags = $($(1)_extra_compile_flags) $(2) ;
	}
	else
	{
		$(1)_extra_compile_flags = $(2) ;
	}
}

rule SetExtraLinkFlags
{
	if $($(1)_extra_link_flags)
	{
		$(1)_extra_link_flags = $($(1)_extra_link_flags) $(2) ;
	}
	else
	{
		$(1)_extra_link_flags = $(2) ;
	}
}

rule SetVariablesOnObjects
{
	local _objects = $($(1)_object_files) ;
	local _i = ;
	for _i in $($(1)_dependant_of)
	{
		if $($(_i)_include_search_paths)
		{
			CCHDRS on $(_objects) += [ GetSearchPaths $(_i) ] ;	
		}
	}	

	for _i in $($(1)_ext_dependant_of)
	{
		if $($(_i)_ext_include_search_paths)
		{
			CCHDRS on $(_objects) += [ FIncludes $($(_i)_ext_include_search_paths) ] ;
		}
		if $($(_i)_ext_defines)
		{
			CCDEFS on $(_objects) += [ FDefines $($(_i)_ext_defines) ] ;
		}
	}

	if $($(1)_include_search_paths)
	{
		CCHDRS on $(_objects) += [ GetSearchPaths $(_libname) ] ;
	}	
	CCDEFS on $(_objects) += [ FDefines $(DEFINES_COMMON) ] ;
	
	if $($(1)_extra_compile_flags)
	{
		CCFLAGS on $(_objects) = $(CCFLAGS) ;
		CCFLAGS on $(_objects) += $($(1)_extra_compile_flags) ;
	}
	
    return $(_objects) ;
}

rule SetVariablesOnObjects2
{
	local _objects = $(1) ;
	local _int_dep = $($(2)_dependant_of) ;
	local _ext_dep = $($(2)_ext_dependant_of) ;
	
	#echo $(2) OBJECTS: $(_objects) ;
	#echo $(2) INTERNAL: $(_int_dep) ;
	#echo $(2) EXTERNAL: $(_ext_dep) ;
	
	local _i = ;
	for _i in $(_int_dep)
	{
		if $($(_i)_include_search_paths)
		{
			CCHDRS on $(_objects) += [ GetSearchPaths $(_i) ] ;	
		}
	}	

	for _i in $(_ext_dep)
	{
		if $($(_i)_ext_include_search_paths)
		{
			CCHDRS on $(_objects) += [ FIncludes $($(_i)_ext_include_search_paths) ] ;
		}
		if $($(_i)_ext_defines)
		{
			CCDEFS on $(_objects) += [ FDefines $($(_i)_ext_defines) ] ;
		}
	}

	if $($(2)_include_search_paths)
	{
		CCHDRS on $(_objects) += [ GetSearchPaths $(_libname) ] ;
	}	
	CCDEFS on $(_objects) += [ FDefines $(DEFINES_COMMON) ] ;
	
	if $($(2)_extra_compile_flags)
	{
		CCFLAGS on $(_objects) = $(CCFLAGS) ;
		CCFLAGS on $(_objects) += $($(2)_extra_compile_flags) ;
	}
	
    return $(_objects) ;
}

rule SetNeededLibraries
{
    local _i = ;
 	LINKFLAGS on $(2) = $(LINKFLAGS) ;
 	LINKFLAGS on $(2) += [ FLibrarySearchPaths $(BUILD_LIB_DIR) ] ;
    for _i in $($(1)_dependant_of)
    {
        local _library = [ GetLinkLibraries $(_i) ] ;
      	LINKLIBS on $(2) += [ FLibrary $(_library) ] ;
		if $(3) != $(_i)
		{
	        Depends $(2) : $(BUILD_LIB_DIR)$(PRELIB)$(_library)$(SUFLIB) ;
		}
    }
    for _i in $($(1)_ext_dependant_of)
    {
        if $($(_i)_ext_link_search_paths)
        {
            LINKFLAGS on $(2) += [ FLibrarySearchPaths $($(_i)_ext_link_search_paths) ] ;
        }
        if $($(_i)_ext_library_files)
        {
            LINKLIBS on $(2) += [ FLibrary $($(_i)_ext_library_files) ] ;
        }
    }
    if $($(1)_extra_link_flags)
    {
    	LINKFLAGS on $(2) += $($(1)_extra_link_flags) ;
    }
}

rule InvokeLibraryDeclarations
{
	local _pass       = Declarations ;
	local _libname	  = $(1) ;
    local _testname   = $(1)_t ;
	local _libpath    = $(2) ;
	local _libfile    = $(BUILD_LIB_DIR)$(PRELIB)$(_libname)$(SUFLIB) ;

	include [ GLOB [ FDirName $(2) ] : lib.jam ] ;

	SetLinkLibraries $(_libname) : $(_libname) ;
}

rule InvokeLibraryDependencies
{
	local _pass     = Dependencies ;
	local _libname  = $(1) ;
    local _testname = $(1)_t ;
	local _libpath  = $(2) ;

    local _include_file = [ GLOB [ FDirName $(2) ] : lib.jam ] ;
	include $(_include_file) ;

	SetObjectFiles $(_libname) ;
    SetObjectFiles $(_testname) ;

	local _libfile     = $(BUILD_LIB_DIR)$(PRELIB)$(_libname)$(SUFLIB) ;
    local _testfile    = $(BUILD_TST_DIR)$(_testname)$(SUFEXE) ;
    local _objects     = [ SetVariablesOnObjects $(_libname) ] ;
    local _testobjects = [ SetVariablesOnObjects $(_testname) ] ;
    local _testrun     = $(_testname)_run ;

    # Actions
	MkDir       $(_libfile:P) ;
    MkDir       $(_testfile:P) ;
	Archive     $(_libfile)      : $(_objects) ;
    Link        $(_testfile)     : $(_testobjects) ;
    RunUnitTest $(_testrun)      : $(_testfile) ;
    Clean       clean            : $(_libfile) ;
    Clean       clean            : $(_testfile) ;

    SetNeededLibraries $(_testname) : $(_testfile) : $(_libname) ;

    # Setup dependency chains.
    if $(_testobjects)
    {
        Depends $(_libfile)  	: $(_libfile:P) ;
        Depends $(_libfile)		: $(_objects) ;
        Depends $(_testfile)	: $(_testfile:P) ;
        Depends $(_testfile) 	: $(_testobjects) ;
        Depends $(_testrun)  	: $(_testfile) ;
        Depends $(_testname)	: $(_testrun) ;
        Depends $(_libname)		: $(_libfile) ;
        Depends $(_libname)		: $(_testname) ;
        Depends lib				: $(_libname) ;
        Depends test			: $(_testrun) ;
	}
    else
    {
        Depends $(_libfile) : $(_libfile:P) ;
	    Depends $(_libfile) : $(_objects) ;
        Depends $(_libname) : $(_libfile) ;
        Depends lib         : $(_libname) ;
    }

	if $(NT)
	{
		Clean clean : $(_testfile:S=.pdb) ;
		Clean clean : $(_testfile).manifest ;
	}

    NotFile $(_libname) $(_testname) $(_testrun) test ;
}

rule InvokeApplication
{
	local _appname			 = $(1) ;
	local _apppath			 = $(2) ;
	local _appfile			 = $(BUILD_BIN_DIR)$(1)$(SUFEXE) ;
	
	include [ GLOB [ FDirName $(2) ] : app.jam ] ;

	# SetObjectFiles $(_appname) ;
	local _sources = [ GetSourceFiles $(_appname) ] ;
	local _objects = [ CreateObjectFiles $(_sources) : $(_appname) ] ;
	_objects = [ SetVariablesOnObjects2 $(_objects) : $(_appname) ] ; 
	
    SetNeededLibraries $(_appname) : $(_appfile) : $(_appname) ;    

	local _alib_sources = [ GetSourceFiles $(_appname)_alib ] ;

	local _path = $(_appfile:P) ;

	if $(_alib_sources)
	{
		local _alib_objects = [ CreateObjectFiles $(_alib_sources) : $(_appname) ] ;
		_alib_objects = [ SetVariablesOnObjects2 $(_alib_objects) : $(_appname) ] ; 
		
		local _applib = $(BUILD_BIN_DIR)$(PRELIB)$(1)_alib$(SUFLIB) ;
		
		# Actions
		MkDir $(_path) ;
		Archive $(_applib) : $(_alib_objects) ;
		Link  $(_appfile)  :  $(_applib) $(_objects) ;
		
		Depends $(_applib)  : $(_path) ;
		Depends $(_applib)  : $(_alib_objects) ;
		Depends lib         : $(_applib) ;

		Depends $(_appfile) : $(_path) ;
		Depends $(_appfile) : $(_applib) ;
		Depends $(_appfile) : $(_objects) ;
		Depends $(_appname) : $(_appfile) ;
		Depends exe         : $(_appname) ;
		
		Clean clean : $(_appfile) ;
		Clean clean : $(_applib) ;
	}
	else
	{
	    # Actions
		MkDir $(_appfile:P) ;
		Link  $(_appfile) : $(_objects) ;
	
	    Depends $(_appfile) : $(_appfile:P) ;
		Depends $(_appfile) : $(_objects) ;
		Depends $(_appname) : $(_appfile) ;
		Depends exe	        : $(_appname) ;
		Clean   clean       : $(_appfile) ;
	}

	if $(NT)
	{
		Clean clean : $(_appfile:S=.pdb) ;
		Clean clean : $(_appfile).manifest ;
	}
	
    NotFile $(_appname) ;
}

rule InvokeLibs
{
    NotFile $(1) ;
	local _subdirs = [ ListDir $(1) ] ;
	local _subdir = ;
	local _confirmed = ;
	local _libname = ;
	for _subdir in $(_subdirs)
	{
		local _lib_file = [ GLOB $(_subdir) : lib.jam ] ;
		if $(_lib_file) 
		{
			# Includes config$(SLASH)Jamrules : $(_lib_file) ;		
			_libname =  [ StripCommon [ FWords $(_subdir) : $(SLASH) ] : $(1) ] ;
			_confirmed += $(_libname) ;
			Depends $(1) : $(_libname) ;
			InvokeLibraryDeclarations $(_libname) : $(_subdir) ;
		}
	}
	_libname = ;	
	for _libname in $(_confirmed)
	{
		InvokeLibraryDependencies $(_libname) : [ FDirName $(1) $(_libname) ] ;	
	}
}

rule InvokeApps
{
    NotFile $(1) ;
	local _subdirs = [ ListDir $(1) ] ;
	local _subdir = ;
	for _subdir in $(_subdirs)
	{
		local _app_file = [ GLOB $(_subdir) : app.jam ] ;
		if $(_app_file) 
		{
			# Includes config$(SLASH)Jamrules : $(_app_file) ;
			local _appname =  [ StripCommon [ FWords $(_subdir) : $(SLASH) ] : $(1) ] ;
			Depends $(1) : $(_appname) ;
			InvokeApplication $(_appname) : $(_subdir) ;
		}
	}
}

rule InvokeTags
{
    ForceClean TAGS : clean_TAGS ;
    local _i = ;
    for _i in $(TAG_FILES) 
    {
        Depends TAGS : $(_i) ;
        TagFile TAGS : $(_i) ;
    }
    Clean clean : TAGS ;
    NotFile clean_TAGS ;
}
